#+TITLE: [译] 椭圆曲线密码学：有限域和离散对数
#+AUTHOR: PugnaHAN
#+EMAIL: justin_victory@hotmail.com
#+DATE: <2016-11-29 周二>
#+OPTIONS: toc:nil

本文是[[http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/][ECC 简介]]中的第二篇。

在上一篇文章中，我们已经知道如何让椭圆曲线再实数域中定义一个域。而且，我们已经定义了[[http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#group-law][加法的运算法则]] :一条直线与椭圆曲线相交的三点满足(P + Q +R = 0），并在[[http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#geometric-addition][几何]] 与 [[http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#algebraic-addition][代数]] 算法中计算了该加法。

然后，我们介绍了[[http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#scalar-multiplication][标量乘法]] （nP = P + P + ... + P)， 并且发现一个相对简单的计算方式：[[http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#double-and-add][翻倍相加法]]。

接下来， *我们椭圆曲线映射到有限域中* ，将看看其与实数中的曲线有什么变化。

* 模p的整数域
  对于有限域来说，故名思意，其元素的个数是有限的，不同于实数一样有无限的变化。对于介绍有限域来说，一个非常好的例子就是模p的整数集[fn:1], p为素数。通常我们将其标记为Z/p, GF(p) 或者F_p。我们在后文中，将会使用这些标记。

  在有限域中，我们有两个二元运算：加法(+)和乘法(*)， 其二者均满足封闭性，结合律和交换律[fn:2]。对这两个运算来说，都存在一个零元和逆元[fn:3]。最后，对于有限域中所有元素来说，乘法是满足分配律的： a * (b + c) = a*b + b*c。

  模p运算的整数集由0到p - 1的所有整数构成。加法和乘法同样是基于[[http://en.wikipedia.org/wiki/Modular_arithmetic][模运算]] (也被称作“时钟运算”)的。这里有几个GF(23)的计算例子：\\
  - 加法： (18 + 9) mod 23 = 4;
  - 减法： (7 - 14) mod 23 = -7 mod 23 = -7 - (-23) = 16;
  - 乘法： 4 * 7 mod 23 = 5;
  - 加法逆运算: -5 mod 23 = 18;
    实际上：(5 + (-5)) mod 23 = (5 + 18) mod 23 = 0;
  - 乘法逆运算: 9^{-1} mod 23 = 18
    实际上： 9 * 9^{-1} mod 23 = 9 * 18 mod 23 = 1;
  倘若这些等式对于你来说相当陌生，并且不能很好的帮助你理解，或者说你想获取更多素数的模运算的信息，可以到[[https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic][可汗学院]] 中学习相关的知识。

  如我们刚才所说，整数的模p运算的集合构成了一个有限域，其满足有限域中所有的条件。但是，p是素数非常重要[fn:4]！整数4的模运算集合无法构成一个域：2没有乘法逆元(比如， 2*x mod 4 = 1无解）。

* 模p内的除法运算

  我们将马上再GF(p)上定义一个椭圆曲线，但是，在此之前，我们有必要强调x/y同样在GF(p)中。 让x/y = x * y^{-1},或者用文字表达来说，x除以y等同于x与y的乘法逆元相乘。虽然事实并非让人惊讶，不过给了我们一个最简单的方式来计算除法： *计算乘法逆元并与另外一个数相乘* 。

  计算乘法逆元可以使用[[http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm][扩展欧几里得算法]] 来“简单”的得到，其算法复杂度为O(logp)(或者说为O(k), k为其比特长度)， 在最差情况下。

  我们将不会详细地介绍扩展欧几里得算法，不过给出了一个扩展欧几里得算法的Python实现： \\

  #+NAME: extended_euclidean_algorithm
  #+BEGIN_SRC python -n
    def extended_euclidean_algorithm(a, b):
        """
        Returns a three-tuple (gcd, x, y) such that
        a * x + b * y == gcd, where gcd is the greatest
        common divisor of a and b.

        This function implements the extended Euclidean
        algorithm and runs in O(log b) in the worst case.
        """
        s, old_s = 0, 1
        t, old_t = 1, 0
        r, old_r = b, a

        while r != 0:
            quotient = old_r // r
            old_r, r = r, old_r - quotient * r
            old_s, s = s, old_s - quotient * s
            old_t, t = t, old_t - quotient * t

        return old_r, old_s, old_t

    def inverse_of(n, p):
        """
        Returns the multiplicative inverse of
        n modulo p.

        This function returns an integer m such that
        (n * m) % p == 1.
        """
        gcd, x, y = extended_euclidean_algorithm(n, p)
        assert (n * x + p * y) % p == gcd

        if gcd != 1:
            # Either n is 0, or p is not a prime number.
            raise ValueError(
                '{} has no multiplicative inverse '
                'modulo {}'.format(n, p))
        else:
            return x % p

  #+END_SRC

* 在GF(p)中的椭圆曲线
  现在，我们已经有了所有的必须元素来保证再GF(p)中定义椭圆曲线。在[[http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#elliptic-curves][上一文]] 中介绍的点集合是:
  #+ATTR_HTML: :alt image :title equation 1 :align center
  [[file:images/equations/1.png]]

  。然而，现在其变成了：
  #+ATTR_HTML: :alt image :title equation 2 :align center
  [[file:images/equations/2.png]]

  。在该区域中，0依然表示无限远点，且a与b则是GF(p)中的元素。
  #+CAPTION: 曲线y^2 = x^3 - 7x + 10 (mod p), p = 19, 97, 127, 487的。 注意到，对于每个x，最多有两个点满足要求且关于y = p / 2对称。
  #+ATTR_HTML: :alt image :title curve in GF(p) :align center
  [[file:images/elliptic-curves-mod-p.png]]


  #+CAPTION: 曲线y^2 = x^3 (mod 29) 是单数的且再(0, 0)位置拥有三个点。这不是一个有效的椭圆曲线 [fn:5]
  #+ATTR_HTML: :alt image :title invalid curve :align center
  [[file:images/singular-mod-p.png]]

  之前在实数中的连续曲线如今变成了一系列(x,y)平面上的点。但是，我们可以证明，尽管我们限制了大小， *在GF(p)中的椭圆曲线仍然能构成一个阿贝尔群* 。

* 点加法
  很显然，我们需要稍微修改一下加法的定义，从而使得该运算能够满足有限域的要求。在实数中，我们定义了与曲线相交的同一直线的三点之和为0(P + Q + R = 0)。 我们依然保留这个定义， 不过如何才能使得该运算能够在GF(p)中有效呢？

  我们可以表示， *如果三点在同一条直线上，那么该三点对齐* 。理所当然，在GF(p)中，直线的定义必然与实数中不同。我们可以不严格地表示，GF(p)中的直线就是满足ax + by + c = 0 (mod p) (标准直线定义与mod p运算结合) 的(x, y)点集合。
  #+CAPTION: 曲线y^2 = x^3 - x + 3 (mod 127), P = (16, 20), Q = (41, 120)的点加法。注意到连接亮点的直线 y = 4x + 83在该平面中“重复”出现
  #+ATTR_HTML: :alt image :title Point addition :align center
  [[file:images/point-addition-mod-p.png]]

  可以证明，点加法依然满足着以下性质：
  - Q + 0 = 0 + Q (零元定义)
  - 对于非零元点Q， 其加法逆元-Q有相同的横坐标和相反的纵坐标。或者用-Q = (x_{Q}, -y_{Q} mod p)来表示。比如，对于在F_29 中的曲线，Q(2, 5)的加法逆元是-Q = (2, -5 mod 29) = (2, 24)
  - P + (-P) = 0 (加法逆元的定义)

* 代数加法
  除了需要再算式尾部添加"mod p"以外，计算点加法的等式与上一文中所介绍的点加法完全相同。因此，给定P = (x_P, y_P), Q = (x_Q, y_Q) 与 R = (x_R, y_R),我们能够通过下面的算式计算P + Q = -R：\\
  #+ATTR_HTML: :alt image :title equation 3 :align center
  [[file:images/equations/3.png]]

  如果P与Q不等，那么斜率m便可以用下式表示：\\
  #+ATTR_HTML: :alt image :title equation 4 :align center
  [[file:images/equations/4.png]]

  如果P、Q相同，我们有：\\
  #+ATTR_HTML: :alt image :title equation 5 :align center
  [[file:images/equations/5.png]]

  表达式的形式没有变化并非巧合：实际上，这些等式在任何域中有效， 无论是有限还是无限(F_2与F_3除外，特殊情况)。 现在，我觉得我得为这个事实做一些证明。但是，群中的法则证明往往涉及到相当复杂的数学概念。不过，我找到一个由Stefan Friedl所编写的[[http://math.rice.edu/~friedl/papers/AAELLIPTIC.PDF][证明]] 只用了相当初级的概念就表达清楚了。如果你对为何该等式能在所有域中有效的画可以认真读读该文章。

  回过头来，我们并不想定义一个几何方法：实际上，目前为止依然存在一些问题。比如说，前文中提到的，计算P + P时，我们需要过P点作其切线。但是，在没有连续性的离散区域，“切线”所表示的意义就不明朗了。我们可以保留这些问题并继续研究，但是纯集合方式在有限域中不尽太复杂而且可操作性非常差。

  相应的，你可以尝试玩玩我编写的[[https://cdn.rawgit.com/andreacorbellini/ecc/920b29a/interactive/modk-add.html][计算点加法交互工具]] 来感受一下。

* 椭圆曲线的秩
  我们曾说过，有限域中表示的椭圆曲线只拥有数量有限的点。现在，我们需要回答一个非常重要的问题， *到底有多少个点* ?

  首先，我们将点的群中点的数目定义为 *群的秩* 。

  从0开始到p-1，尝试所有的x的可能性，这样来计算其点的数目并非一个很好的选择，因为其时间复杂度为O(p)。因此，若p是大素数的话，该方法将花费相当多的时间。

  幸运的是，有一个更为快速的计算方式：[[https://en.wikipedia.org/wiki/Schoof%27s_algorithm][Schoof's algorithm]] 。我不会详细地介绍该算法，我们只需要关心的是其可以在多项式时间内完成，而这才是我们所需要的。

* 标量乘法和循环子群
  在实数中，乘法可以表示成：\\
  #+ATTR_HTML: :alt image :title equation 6 :align center
  [[file:images/equations/6.png]]

  我们可以使用[[http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#double-and-add][倍和法]] 来保证乘法的能够再O(log n)步内完成(或者表示为O(k)， k为n的比特长度)。同点加法一样，我为[[https://cdn.rawgit.com/andreacorbellini/ecc/920b29a/interactive/modk-mul.html][标量乘法]] 写了一个交互工具。

  GF(p)域中的椭圆曲线点乘法拥有相同的有趣特性。我们不妨拿y^2 = x^3 + 2x + 3 (mod 97) 和点 P = (3, 6) 来举例。接下来，[[https://cdn.rawgit.com/andreacorbellini/ecc/920b29a/interactive/modk-mul.html][计算]] P的所有乘法：
  #+CAPTION: P的点乘法只有五个，(0, P, 2P, 3P, 4P). 他们将不断循环重复。因此，很容易地能过够指出椭圆曲线的标量乘法和模数运算的相似之处
  #+ATTR_HTML: :alt image :title scalar multiplication :align center
  [[file:images/cyclic-subgroup.png]]


  - 0P=00P=0
  - 1P=(3,6)
  - 2P=(80,10)
  - 3P=(80,87)
  - 4P=(3,91)
  - 5P=0
  - 6P=(3,6)
  - 7P=(80,10)
  - 8P=(80,87)
  - 9P=(3,91)
  - ...

  这里我们可以很快得发现两件事：第一， P的乘法只有五个结果，其他的曲线上的点并未出现； 第二， 他们是循环出现的。 我们可以写出： 

  - 5kP = 0
  - (5k + 1)P = P
  - (5k + 2)P = 2P
  - (5k + 3)P = 3P
  - (5k + 4)P = 4P

  k为任意整数。 认真观察可以发现，其实上面五个表达式可以”合成“为一个通式: kP = (k mod 5) P。

  不仅如此，我们还可以很快验证出这五个点对于加法封闭。这意味着：无论我怎么对0P, 1P, 2P, 3P和4P做加法运算，其结果始终是这五个点，而其他椭圆上的点也不可能出现。

  其循环性质并非针对P = (3, 6)这一个点的，而是对于所有的点来说都有相同的性质。实际上，如果我们用P表示任意一点：\\
  #+ATTR_HTML: :alt image :title equation 4 :align center
  [[file:images/equations/7.png]]

  这表示，如果我们将两个P的倍数相加，我们可以得到P的乘法。(比如，P的乘法在加法下封闭)。 这已经足够[[https://en.wikipedia.org/wiki/Subgroup#Basic_properties_of_subgroups][证明]] P的乘法集合是一个循环子群。

  一个“子群”表示其为另外一个群的子集。一个“循环子群”则表示，某个子群下其元素循环出现，就如同我们在上面的例子中展示的一样。P点则表示为该子群的 *基点* 或者叫 *生成者* 。

* 子群的秩
  我们可以自己问自己， 由P生成的子群的秩到底是多少(或者，P的秩是多少)。 回答这个问题并不能使用SScoof's algrithm， 因为该算法只对整个椭圆曲线有效，而非对子群有效。在深入这个问题之前，我们需要一些知识：
  1. 目前为止， 我们已经定义了秩表示该群的点个数。该定义依然有效，不过再子群中，我们需要给出一个相等的定义， *P的秩是使得nP = 0的最小正整数n* 。实际上，如果你观察一下前例，我们的子群包含五个点，并且5P = 0;
  2. 子群的秩与椭圆曲线的秩的联系k可以表示为[[https://en.wikipedia.org/wiki/Lagrange%27s_theorem_(group_theory)][Lagrange's group]] ，其表达了子群的秩是其父群的秩的一个除数。换句话说， N是椭圆曲线包含的点数，n是子群点数，则有n | N <=> N mod n = 0;


  这两条信息给了我们一条计算子群秩的方法:
  1. 用Scroof算法计算椭圆曲线的秩N；
  2. 找出N所有的整除数；
  3. 对于所有N的除数， 计算nP;
  4. 满足nP = 0的最小正整数便是子群的秩。


  举一个例子， 曲线y^2 = x^3 - x + 3在F_37 上，其秩为N = 42。 因此，子群的秩可能为n = 1, 2, 3, 6, 7, 14, 21 或 42。如果P = (2, 3)， 我们依次[[https://cdn.rawgit.com/andreacorbellini/ecc/920b29a/interactive/modk-mul.html?a=-1&b=3&p=37&px=2&py=3][计算]] 可得最小7P = 0， 因此n = 7， 为P的秩。

  *值得注意的是，选取最小的除数而非随机选取是非常重要的* 。如果我们随机进行，我们可能会选择n = 14， 而14并非子群的秩，只是他的一个倍数。

  另外一个例子：椭圆曲线y^2 = x^3 - x + 1再F_29 上的秩为N=37, 为质数， 因此n只有可能为1或者37。由此，你可以轻易猜测出，当n=1时，子群只有一个元素；当n=N时，子群拥有与椭圆曲线相同的元素点。

* 计算基点
  对于我们的ECC算法，我们希望有一个高秩的子群。因此，一般来说，我们会选择一跳椭圆曲线，然后计算它的秩(N)，而后选取一个较高的除数(n)作为子群的秩，最后再计算合适的基点。这表明，我们并非遵循先选取基点再计算秩的顺序来获取我们想要的信息，而是使用相反的方法：先选取一个看上去能够满足条件的秩，再通过秩来寻求一个合适的基点。然而，我们该如何具体实施呢？

  首先，我们需要多引入一个元素。Lagrange's theorem 表示h = N/n始终是一个整数（因为n是N的整除数）。我们通常使用 *子群因数* 来称呼数字h。

  对于每个椭圆曲线上的点均有NP=0，因为N是n的倍数，而nP = 0且子群是循环的。使用刚才的数字h，我们能够表示出：\\
  #+ATTR_HTML: :alt image :title equation 7 :align center
  [[file:images/equations/8.png]]

  假设n是一个素数（我们会在后面的文章中解释原因，我们更偏爱素数秩）。上一个等式表明点G = hP生成了一个秩为n的子群（当G=hP=0时除外，再这种情况下子群的秩为1）。

  1. 计算椭圆曲线的秩N；
  2. 选择一个n作为子群的秩。为了使得算法有效，n应该为N的一个素除数。
  3. 计算子群因数h = N / n;
  4. 在椭圆曲线上随机选择点P；
  5. 计算G = hP;
  6. 如果G为0， 返回第四步。直到我们找到满足子群的秩为n，子群因素为h的生成点。

  注意，该算法只对n为素数时有效。倘若n为合数，G的秩则应该为n的一个除数。

* 离散对数
  由于之前我们在连续的椭圆曲线上进行了研究，现在我们需要讨论一个问题：当我们知道P和Q,如何求满足Q = kP的k？

  这个问题，也就是 *椭圆曲线的离散对数* 问题，被认为是一个难解的问题，因为目前并没有一个很有效的方法来快速地求取Q的值，只有依赖传统的重复计算。不过，目前并没有严格的数学证明来验证该问题的难解性。

  与该问题累死的离散对数问题同样被用在一些其他的加密系统，如数字签名算法(DSA)， Diffie-Hellman key exchange(D-H)和ElGamal算法中——它们拥有相同的名字（离散对数难题）并非只是巧合。算法不同的地方在于使用了模数乘方来替代标量乘法。他们的对数难题可以使用下面的式子来表示：假如ab已知，求k使得b = a^k mod p。

  有趣的是，ECC的离散对数难题视乎比其他应用在密码学的相似的问题更加困难。这显示我们只需要更小的k便可以达到与其他算法相似的保密强度，这部分内容我将在本系列文章中，也就是第四篇文章中进行介绍。

* 下周预告
  今天已经有足够多的内容值得消化了！我真心希望各位能够喜欢这篇文章，如果有意见的话，请在下面评论。
  
  下周的文章将会是该系列的第三篇文章:密钥对生成，ECDH和ECDSA。我相信它是本系列文章中最有趣的部分之一，请不要错过。
  

[fn:1] 模运算(mod): 就是取余运算，在C/C++语言中表示为%。 比如 13 mod 5 = 3, 3是5除13的余数。 A mod B = r => A = n * B + r, n、r是整数且r<B。
[fn:2]
1. 封闭性： 如果a,b属于GF(p)， 那么a+b和 a*b都属于GF(p)。
2. 结合律: (a + b) + c = a + (b + c), (a * b) * c = a * (b * c);
3. 交换律: a + b = b + a, a * b = b * a; (C++中string的加法运算不满足交换律， 矩阵运算不满足乘法交换律)
[fn:3] 零元O: 对于任意元素均满足a + O = a, a + (-a) = O， -a是a的加法逆元; 逆元： 对于任意不为O的元素均存在一个单位元e满足a * e = e * a = a， 则a * a^{-1} = e， 则a^{-1} 就是a的逆元。
[fn:4] 对于合数来说q来说，其肯定能表示成多个数的积，q = n_1 * n_2。因为n_1, n_2均小于p，因此，对于mod q的乘法来说不满足所有的元素都有逆, 如n_1与n_2。不过，倘若你能定义一种乘法运算满足以上所有属性，依然可以构成一个有限域，例如GF(2^m)域，其定义的乘法是二者相乘并对某个素多项式取余， 这是理解AES算法中一步的关键。
[fn:5] 原文是The curve * is singular and has a triple point in (0, 0)， 翻译得可能不准确，故附上原文。
